 
 # Step 1 : import pakage
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

pd.set_option('display.max_rows', 10)
pd.set_option('display.max_columns', 500)







# Step 2 : Helper functions (3 Methods)

# Method 1 
def sum_geo_seq(a,r,n):

    """
    Compute sum of the first n terms of a geometric sequence

    Arguments:
    a -- Scale factor, equal to the sequence's start value
    r -- r ≠ 0 is the common ratio
    n -- Number of terms
    
    Return:
    Sn -- sum_geo_seq(a,r,n)
    """

    if r == 0:
        print("Common ratio cannot be 0")
    elif r == 1:
        Sn = n * a
        return Sn
    else:
        Sn = a * (1 - r**n) / (1 - r)
        return Sn    

a, r, n = (4, 2, 3)
Sn = sum_geo_seq(a,r,n)
print("A geometric sequence has starting value = %.2f, common ratio = %.2f. The sum of its first %d terms = %.2f"
     %(a, r, n, Sn))
     
a, r, n = (4, 1, 3)
Sn = sum_geo_seq(a,r,n)
print("A geometric sequence has starting value = %.2f, common ratio = %.2f. The sum of its first %d terms = %.2f"
     %(a, r, n, Sn))
     
a, r, n = (4, 0, 3)
sum_geo_seq(a,r,n)


# Method 2
def sum_geo_seq2(a,r,n):

    """
    Compute sum of the first n terms of a geometric sequence

    Arguments:
    a -- Scale factor, equal to the sequence's start value
    r -- r ≠ 0 is the common ratio
    n -- Number of terms
    
    Return:
    Sn -- sum_geo_seq2(a,r,n)
    """    

    if r == 0:
        print("Common ratio cannot be 0")  
    
    else:
        Sn = 0
        for i in range(1, n+1):
            a_i = a * r ** (i-1)
            Sn = Sn + a_i
        return Sn    

# Method 3

def sum_geo_seq3(a,r,n):
    
    """
    Compute sum of the first n terms of a geometric sequence

    Arguments:
    a -- Scale factor, equal to the sequence's start value
    r -- r ≠ 0 is the common ratio
    n -- Number of terms
    
    Return:
    Sn -- sum_geo_seq3(a,r,n)
    """    

    if r == 0:
        print("Common ratio cannot be 0")
    
    else:
        Sn = np.geomspace(a, a*r**(n-1), num=n).sum()    
        return Sn    








# Step 3 : Compute monthly mortgage payment

def mth_mtg_pmt(Bal, Rate, Period):
    
    """
    Compute monthly mortgage payment

    Arguments:
    Bal    -- Initial balance or Current outstanding balance
    Rate   -- Annual interest rate in percentage
    Period -- Amortization period or Remaining amortization period 
    
    Return:
    Pmt -- mth_mtg_pmt(Bal, Rate, Period)
    """
    
    #Calculate monthly interest rate
    mRate = Rate/12/100
    
    #Calculate monthly mortgage payment using above defined helper function
    a = 1 / (1 + mRate)
    r = 1 / (1 + mRate)
    n = Period * 12
    D = sum_geo_seq(a,r,n)
    
    Pmt = Bal / D

    return Pmt

# Print out result.
Bal, Rate, Period = (760000, 2.19, 25)
Pmt = mth_mtg_pmt(Bal = 760000, Rate = 2.19, Period = 25)
print("When balance = " + str(Bal) + ", annual interest rate = " + str(Rate) + 
      "%, amortization period = " + str(Period) + ",")
print("monthly mortgage payment is: " + str(round(Pmt,2)))






# Step 4 : Create mortgage amortization schedule

def amort(Bal, Rate, Period):

    """
    Create mortgage amortization schedule

    Arguments:
    Bal    -- Current outstanding balance
    Rate   -- Annual interest rate in percentage
    Period -- Amortization Period
    
    Returns:
    Res -- Nested list. Mortgage amortization schedule including payment number, outstanding balance, monthly payment,
           interest payment, cumulative interest payment, principal payment, cumulative principal payment
    """
    
    # Parameter initialization
    Res = []
    CumInt = 0
    CumPri = 0
    
    # Calculate monthly mortgage payment based on current balance, 
    # annual interest rate and remaining amortization period
    MthPmt = mth_mtg_pmt(Bal, Rate, Period)
    
    # Create mortgage amortization cash flow
    for i in range(1, Period * 12 + 1):
    
        # Interest Payment
        # Calculate interest payment as of ith mortgage payment date
        IntPmt = Bal * Rate/100/12
        # Calculate cumulative interest payment as of ith mortgage payment date
        CumInt = CumInt + IntPmt

        # Principal Payment
        # Calculate principal payment as of ith mortgage payment date
        PriPmt = MthPmt - IntPmt
        # Calculate cumulative principal payment as of ith mortgage payment date
        CumPri = CumPri + PriPmt
        
        # Outstanding Balance
        # Calculate outstanding banlance as of ith mortgage payment date
        Bal = Bal - PriPmt

        # Create mortgage payment cash flow
        # i, Bal, MthPmt, IntPmt, CumInt, PriPmt, CumPri
        Res.append([i, Bal, MthPmt, IntPmt, CumInt, PriPmt, CumPri])

    return Res

# Print out first two payments given balance = 760000, anuual interest rate is 2.19%, amortization period is 25 years.
CashFlow = amort(Bal = 760000, Rate = 2.19, Period = 25)
print(type(CashFlow))
print('First Payment:', [int(i) for i in CashFlow[0]]) 
print('Second Payment:', [int(i) for i in CashFlow[1]])










# Step 5 : Convert list of cash flow into pandas DataFrame


# pandas documentation http://pandas.pydata.org/pandas-docs/stable/index.html
# https://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html
def to_Pandas(Bal, Rate, Period, FirstPmtDate):
    
    '''
    Create mortgage amortization schedule in Pandas DataFrame format

    Arguments:
    Bal    -- Current outstanding balance
    Rate   -- Annual interest rate in percentage
    Period -- Amortization Period
    FirstPmtDate -- String. yyyymmdd.
    
    Returns:
    Df -- Pandas DataFrame. Complete Mortgage amortization schedule.
    '''
    
    # Convert mortgage amortization schedule from nested list to Pandas DataFrame and 
    # round all columns to 2 decimal places.
    Df = pd.DataFrame(amort(Bal,Rate,Period)).round(2) 

    # Add column names
    Df.columns = ['PmtNo', 'OutstandingBal', 'MthPmt', 'IntPmt', 'TotIntPaid',
                  'PrincipalPmt', 'TotPrincipalPaid']

    # Add Payment date column
    Df['PmtDate'] = pd.date_range(start=FirstPmtDate, periods=Period*12, freq='MS')
    
    # Customize column order
    Df = Df[['PmtDate','PmtNo', 'OutstandingBal', 'MthPmt', 'IntPmt', 'TotIntPaid',
               'PrincipalPmt', 'TotPrincipalPaid']]
    
    return Df


# Output:
Df = to_Pandas(Bal=760000, Rate=2.19, Period=25, FirstPmtDate='2017-05-01')
Df


# Export to csv file
Df.to_csv('mtg_amort_table.csv')





# Step 6 : Plot

# https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html
plt.plot(Df['PmtNo'], Df['TotIntPaid'], label='CumulativeInterestPaid')
plt.plot(Df['PmtNo'], Df['TotPrincipalPaid'], label='CumulativePrincipalPaid')
plt.plot(Df['PmtNo'], Df['OutstandingBal'], label='OutstandingBalance')
plt.legend()
plt.show()

# https://matplotlib.org/api/_as_gen/matplotlib.pyplot.stackplot.html
# https://matplotlib.org/gallery/lines_bars_and_markers/stackplot_demo.html
plt.stackplot(Df['PmtNo'], Df['PrincipalPmt'], Df['IntPmt'], labels=['PrincipalPayment','InterestPayment'])
plt.legend(loc='upper left')
plt.show()





# Step 7 : Advanced: Prepayment

def adv_amort(Bal, Rate, Period, PrePmt = {}):
    
    """
    Create mortgage amortization schedule

    Arguments:
    Bal    -- Current outstanding balance
    Rate   -- Annual interest rate in percentage
    Period -- Amortization Period
    PrePmt -- dict, Optional. 
              Prepayment between ith and (i+1)th payment
    
    Returns:
    Res -- Nested list. Mortgage amortization schedule including payment number, outstanding balance, monthly payment,
           interest payment, cumulative interest payment, principal payment, cumulative principal payment,
           prepayment amount, cumulative prepayment amount
    """
    
    # Parameter initialization
    Res = []
    CumInt = 0
    CumPri = 0
    CumPre = 0
    
    # Calculate monthly mortgage payment based on current balance, 
    # annual interest rate and remaining amortization period
    MthPmt = mth_mtg_pmt(Bal, Rate, Period)
    
    # Create mortgage amortization cash flow
    for i in range(1, Period * 12 + 1): 
    
        # Interest Payment
        # Calculate interest payment as of ith mortgage payment date
        IntPmt = Bal * Rate/100/12 
        
        # Calculate cumulative interest payment as of ith mortgage payment date
        CumInt = CumInt + IntPmt
        
        # Prepayment
        # Set prepayment value if there is a prepayment on ith mortgage payment date, set to 0 otherwise.
        if i in PrePmt:
            PrePmtVal = PrePmt[i]
        else:
            PrePmtVal = 0

        # Calculate cumulative prepayment as of ith mortgage payment date
        CumPre = CumPre + PrePmtVal
        
        # Principal Payment
        # Calculate principal payment as of ith mortgage payment date
        PriPmt = MthPmt - IntPmt + PrePmtVal

        # Raise warning "Principal Payment cannot exceed current balance! Please re-enter prepayment amount."
        # if Principal Payment is more than current balance and stop creating the cash flow.
        if PrePmtVal > 0 and PriPmt > Bal:
            print('Principal Payment cannot exceed current balance! Please re-enter prepayment amount.')
            break   
        
        # Outstanding Balance
        # Calculate outstanding banlance as of ith mortgage payment date
        Bal = Bal - PriPmt

        # Adjust payment amount on ith mortgage payment date if outstanding balance is negative after ith payment
        if Bal < 0:
            Bal = Bal + PriPmt
            MthPmt = IntPmt + Bal
            PriPmt = Bal
            CumPri = CumPri + PriPmt
            Bal = 0
            Res.append([i, Bal, MthPmt, IntPmt, CumInt, PriPmt, CumPri, PrePmtVal, CumPre])
            break
        
        # Calculate cumulative principal payment as of ith mortgage payment date
        CumPri = CumPri + PriPmt
        
        # Create mortgage payment cash flow
        # i, Bal, MthPmt, IntPmt, CumInt, PriPmt, CumPri, PrePmtVal, CumPre
        Res.append([i, Bal, MthPmt, IntPmt, CumInt, PriPmt, CumPri, PrePmtVal, CumPre])       
        
    return Res


# Print out first four payments given balance = 760000, anuual interest rate is 2.19%, 
# amortization period is 25 years and 
# prepayments were made on the third and fifth payment date with 300000 and 100000 dollars.
adv_CashFlow = adv_amort(Bal = 760000, Rate = 2.19, Period = 25, PrePmt = {3:300000,5:100000})
print('First Payment:', [int(i) for i in adv_CashFlow[0]])
print('Second Payment:', [int(i) for i in adv_CashFlow[1]])
print('Third Payment:', [int(i) for i in adv_CashFlow[2]])
print('Forth Payment:', [int(i) for i in adv_CashFlow[3]])



def adv_to_Pandas(Bal, Rate, Period, FirstPmtDate, PrePmt = {}):
    
    '''
    Create mortgage amortization schedule in Pandas DataFrame format

    Arguments:
    Bal    -- Current outstanding balance
    Rate   -- Annual interest rate in percentage
    Period -- Amortization Period
    FirstPmtDate -- String. yyyymmdd.
    PrePmt -- dict, Optional. 
              Prepayment between ith and (i+1)th payment
    
    Returns:
    Df -- Pandas DataFrame. Complete Mortgage amortization schedule.
    '''
    
    # Convert mortgage amortization schedule from nested list to Pandas DataFrame and 
    # round all columns to 2 decimal places.
    Df = pd.DataFrame(adv_amort(Bal,Rate,Period,PrePmt)).round(2)
     
    # Add column names
    Df.columns = (['PmtNo', 'OutstandingBal', 'MthPmt', 'IntPmt', 'TotIntPaid',
                    'PrincipalPmt', 'TotPrincipalPaid', 'PrePmt', 'TotPrePmtPaid'])
    
    # Add Payment date column    
    Df['PmtDate'] = pd.date_range(start=FirstPmtDate, periods=Df.shape[0], freq='MS')
    
    # Customize column order 
    Df = Df[['PmtDate','PmtNo', 'OutstandingBal', 'MthPmt', 'IntPmt', 'TotIntPaid',
               'PrincipalPmt', 'TotPrincipalPaid', 'PrePmt', 'TotPrePmtPaid']]
    
    return Df


# Output:
adv_to_Pandas(Bal=760000, Rate=2.19, Period=25, FirstPmtDate='2017-05-01', PrePmt={3:300000,5:100000})
